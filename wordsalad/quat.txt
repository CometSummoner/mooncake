/*

kd: A quaternion is... honestly, if you don't know, go back to school, cuz there's little chance of
using this meaningfully otherwise.

*/

struct Quat {
	double q;
	vector3 u;
	
	void To (double r, vector3 v) {
		q = r;
		u = v;
	}
	
	void To4 (double a, double b, double c, double d) {
		q = a;
		u = (b, c, d);
	}
	
	void Copy (Quat other) {
		q = other.q;
		u = other.u;
	}
	
	void To0 () {
		q = 0;
		u = (0, 0, 0);
	}
	
	void ToId () {
		q = 1;
		u = (0, 0, 0);
	}
	
	void Fill (double f) {
		q = f;
		u = (f, f, f);
	}
	
	void ToRot (double angle = 0, double pitch = 0, double roll = 0) {
		let cosang		= cos(angle / 2);
		let cosvang		= cos(pitch / 2);
		let cosrang		= cos(roll / 2);
		let sinang		= sin(angle / 2);
		let sinvang		= sin(pitch / 2);
		let sinrang		= sin(roll / 2);
		
		q = cosang * cosvang * cosrang + sinang * sinvang * sinrang;
		u = (
			cosang * cosvang * sinrang - sinang * sinvang * cosrang,
			cosang * sinvang * cosrang + sinang * cosvang * sinrang,
			sinang * cosvang * cosrang - cosang * sinvang * sinrang);
	}
	
	void ToRotNoRoll (double angle = 0, double pitch = 0) {
		let cosang		= cos(angle);
		let cosvang		= cos(pitch);
		let sinang		= sin(angle);
		let sinvang		= sin(pitch);
		
		q = cosang * cosvang;
		u = (
			sinang * cosvang,
			cosang * sinvang,
			sinang * sinvang);
	}
	
	void ToAxisRot (double ang = 0, vector3 a = (0, 0, 1)) {
		q = cos(ang / 2);
		u = sin(ang / 2) * a;
	}
	
	void ToWorldAngleRot (double ang = 0) {
		q = cos(ang / 2);
		u = (0, 0, sin(ang / 2));
	}
	
	void ToWorldPitchRot (double ang = 0) {
		q = cos(ang / 2);
		u = (0, sin(ang / 2), 0);
	}
	
	void ToWorldRollRot (double ang = 0) {
		q = cos(ang / 2);
		u = (sin(ang / 2), 0, 0);
	}
	
	void ApplyAngles (double angle = 0, double pitch = 0, double roll = 0) {
		Quat temp_q;
		temp_q.ToRot(angle, pitch, roll);
		Mul(temp_q);
	}
	
	// kd: Naturally there is not really 3x1 by 4x1 multiplication, but there is
	// 4x1 by 4x1 multiplication (quaternion by quaternion), so you may safely assume
	// this here does (0, v) * (q, u) in quaternion space, and returns only the vector
	// part of the resulting quaternion!
	vector3 MulVec (vector3 v) {
		return q * v + u cross v;
	}
	
	vector3 MulVecLeft (vector3 v) {
		return q * v + v cross u;
	}
	
	// kd: Assuming this quaternion is a rotation quaternion, this will return v
	// rotated by the quaternion conjugation operation (q^-1 * (v * q)), or in other
	// words, rotate v from its local view point... by the rotation you described here.
	// Makes sense to you I hope?
	vector3 RotateVec (vector3 v) {
		let w = u cross v;
		return v + 2 * (q * w + v cross w);
	}
	
	void Add (Quat other) {
		q += other.q;
		u += other.u;
	}
	
	void Sub (Quat other) {
		q -= other.q;
		u -= other.u;
	}
	
	void Mul (Quat other) {
		let q_temp = q;
		q = q * other.q - u dot other.u;
		u = q_temp * other.u + other.q * u + (u cross other.u);
	}
	
	void ToUnit () {
		if(!(0 ~== q) || !(u ~== (0, 0, 0)) ) {
			let len = sqrt(q * q + u dot u);
			q /= len;
			u /= len;
		}
	}
	
	void ToUnitNoCheck () {
		let len = sqrt(q * q + u dot u);
		q /= len;
		u /= len;
	}
	
	void Scale (double f) {
		q *= f;
		u *= f;
	}
	
	// kd: If this quaternion is a rotation quaternion, then this will invert the
	// direction of the rotation!
	void InvertRot () {
		u = -u;
	}
	
	void Negate () {
		q = -q;
		u = -u;
	}
	
	double MaxEntry () const { return max(q, max(u.x, max(u.y, u.z))); }
	double MinEntry () const { return min(q, min(u.x, min(u.y, u.z))); }
	double MaxAbs () const { return max(abs(q), max(abs(u.x), max(abs(u.y), abs(u.z) ))); }
	double MinAbs () const { return min(abs(q), min(abs(u.x), min(abs(u.y), abs(u.z) ))); }
	
	bool Is0      () const { return 0  == q && (0, 0, 0)  == u; }
	bool IsNear0  () const { return 0 ~== q && (0, 0, 0) ~== u; }
	bool IsId     () const { return 1  == q && (0, 0, 0)  == u; }
	bool IsNearId () const { return 1 ~== q && (0, 0, 0) ~== u; }
	bool IsEqual     (Quat other) const { return q  == other.q && u  == other.u; }
	bool IsNearEqual (Quat other) const { return q ~== other.q && u ~== other.u; }
	
	double Length2 () const {
		return q * q + u dot u;
	}
	
	double Length () const {
		return sqrt(q * q + u dot u);
	}
	
	double Dot_ (Quat other) const {
		return q * other.q + u dot other.u;
	}
	
	double, double, double WorldAnglesFromRot () const {
		let sinvang_2 = u.x * u.z - q * u.y;
		
		if(0.4999 < sinvang_2) {
			return
				2 * VectorAngle(2 * (u.x * u.y - q * u.z), q * q - u.x * u.x + u.y * u.y - u.z * u.z) - 90,
				90,
				0;
		}
		
		else if(sinvang_2 < -0.4999) {
			return
				2 * VectorAngle(2 * (u.x * u.y - q * u.z), q * q - u.x * u.x + u.y * u.y - u.z * u.z) - 90,
				-90,
				0;
		}
		
		let qq = q * q;
		let xx = u.x * u.x;
		let yy = u.y * u.y;
		let zz = u.z * u.z;
		
		return
			2 * VectorAngle(qq + xx - yy - zz, 2 * (u.x * u.y + q * u.z)),
			2 * asin(2 * sinvang_2),
			2 * VectorAngle(qq - xx - yy + zz, 2 * (q * u.x + u.z * u.y));
	}
	
	double, double, double ViewAnglesFromRot () const {
		double ang, vang, rang;
		[ang, vang, rang] = WorldAnglesFromRot();
		return ang, -vang, -rang;
	}
	
	void Lerp (Quat other, double f = 0.5) {
		let other_f = 1.0 - f;
		q = f * other.q + other_f * q;
		u = f * other.u + other_f * u;
	}
	
	// kd: I include this specifically cuz it's useful in general to gradually weaken
	// input-based rotation quaternions.
	void LerpToId (double f = 0.5) {
		q = f * (q - 1) + 1;
		u *= f;
	}
}
