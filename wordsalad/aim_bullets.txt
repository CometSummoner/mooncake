/*

kd: This here helps you aim bullet spreads. For example, you might want to aim a cone of bullets
all the way up. This will account for pitch properly, whereas gzd would do a far simpler
calculation that would also effectively reduce all spread to 0.

*/

struct AimBullet {
	void FromPlayer (PlayerPawn po) {
		orientation.ToViewRot(po.angle, -po.pitch, po.roll);
		base_angle =  po.angle;
		base_pitch = -po.pitch;
	}
	
	double, double ToOffset (double angle_offset = 0, double pitch_offset = 0) {
		let dir			= orientation.LocalViewSphere(angle_offset, pitch_offset);
		world_angle		= VectorAngle(dir.x, dir.y);
		world_pitch		= asin(dir.z);
		return world_angle, world_pitch;
	}
	
	vector3 ToDir (double angle_offset = 0, double pitch_offset = 0) {
		return orientation.LocalViewSphere(angle_offset, pitch_offset);
	}
	
	double TotalAngle () const {
		return world_angle;
	}
	
	double TotalPitch () const {
		return world_pitch;
	}
	
	double Angle () const {
		return world_angle - base_angle;
	}
	
	double Pitch () const {
		return world_pitch + base_pitch;
	}
	
	Mat3x3 orientation;
	double world_angle;
	double world_pitch;
	double base_angle;
	double base_pitch;
}
