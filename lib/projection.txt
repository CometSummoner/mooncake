/*

kd: You can think of this as the sequel to libeye or sth.

*/

struct ProjectionInfo {
	
	// kd: All these need setting up. You can get a quick start by just using the function below.
	enum RenderMode { software = 0, planar = 0, opengl = 1, linear = 1 }
	
	Mat3x3		orientation;
	vector2		resolution;
	vector3		view_pos;
	vector3		view_angles;
	double		aspect_ratio;
	vector3		diff;
	double		depth;
	RenderMode	render_mode;
	double		pixel_ratio;
	double		fov;
	
	ui void ForRenderEvent (RenderEvent event) {
		view_pos		= event.viewpos;
		view_angles		= (event.viewangle, -event.viewpitch, -event.viewroll);
		resolution		= (Screen.GetWidth(), Screen.GetHeight());
		aspect_ratio	= max(4.0 / 3, Screen.GetAspectRatio());
		pixel_ratio		= level.pixelstretch;
		fov				= players [consoleplayer].fov;
		Prepare();
	}
	
	play void ForPlayerDeproject (PlayerInfo player, vector2 source_resolution = (-1, -1)) {
		if(source_resolution.x < 0) {
			resolution = (Screen.GetWidth(), Screen.GetHeight());
			aspect_ratio = max(4.0 / 3, Screen.GetAspectRatio());
		}
		
		else {
			resolution = source_resolution;
			aspect_ratio = resolution.x / resolution.y;
		}
		
		let mo			= player.mo;
		view_pos		= mo.vec3offset(0, 0, player.mo.viewheight);
		view_angles		= (mo.angle, -mo.pitch, -mo.roll);
		pixel_ratio		= level.pixelstretch;
		fov				= player.fov;
		PrepareDeproject();
	}
	
	ui void Prepare () {
		switch(render_mode) {
		default:
			orientation.ToLinearWorldToScreen(
				yaw:			view_angles.x,
				pitch:			view_angles.y,
				roll:			view_angles.z,
				hor_fov:		fov,
				aspect_ratio:	aspect_ratio,
				pixel_ratio:	pixel_ratio);
			break;
		case software:
		case planar:
			orientation.ToPlanarWorldToScreen(
				yaw:			view_angles.x,
				pitch:			view_angles.y,
				hor_fov:		fov,
				aspect_ratio:	aspect_ratio,
				pixel_ratio:	pixel_ratio);
			break;
		}
	}
	
	play void PrepareDeproject () {
		switch(render_mode) {
		default:
			orientation.ToLinearScreenToWorld(
				yaw:			view_angles.x,
				pitch:			view_angles.y,
				roll:			view_angles.z,
				hor_fov:		fov,
				aspect_ratio:	aspect_ratio,
				pixel_ratio:	pixel_ratio);
			break;
		case software:
		case planar:
			orientation.ToPlanarScreenToWorld(
				yaw:			view_angles.x,
				pitch:			view_angles.y,
				hor_fov:		fov,
				aspect_ratio:	aspect_ratio,
				pixel_ratio:	pixel_ratio);
			break;
		}
	}
	
	vector3 DeprojectAbs (vector2 abs_pos = (0, 0), double depth = 100) const {
		switch(render_mode) {
		case software:
		case planar:
			return view_pos + orientation.PlanarScreenToWorld(2 * abs_pos - (1, 1), depth);
		}
		
		return view_pos + orientation.LinearScreenToWorld(2 * abs_pos - (1, 1), depth);
	}
	
	vector3 Deproject (vector2 source_pos = (0, 0), double depth = 100) const {
		return view_pos + orientation.LinearScreenToWorld(
		2 * (source_pos.x / resolution.x - 0.5, source_pos.y / resolution.y - 0.5),
		depth);
	}
	
	void Project (vector3 pos = (0, 0, 0)) {
		diff = level.vec3diff(view_pos, pos);
		
		switch(render_mode) {
		default:
			depth = orientation.LinearDepth(diff);
			break;
		case software:
		case planar:
			depth = orientation.PlanarDepth(diff);
			break;
		}
	}
	
	void MultiProject (Array <Actor> mos) {
		for(let ii = 0; ii < mos.size(); ii++) {
			let mo = mos [ii];
			console.printf(mo.GetClassName());
		}
	}
	
	clearscope bool IsInFront () const {
		return 0 < depth;
	}
	
	clearscope vector2 NormalPos () const {
		switch(render_mode) {
		case software:
		case planar:
			return orientation.PlanarWorldToAbs(diff, depth);
			break;
		}
		
		return orientation.LinearWorldToAbs(diff, depth);
	}
	
	clearscope vector2 ScreenPos () const {
		switch(render_mode) {
		case software:
		case planar:
			return orientation.CompScale2(
				(0.5, 0.5) + 0.5 * orientation.PlanarWorldToAbs(diff, depth),
				resolution);
			break;
		}
		
		return orientation.CompScale2(
			(0.5, 0.5) + 0.5 * orientation.LinearWorldToAbs(diff, depth),
			resolution);
	}
}
